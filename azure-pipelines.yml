trigger: 
- 'main'

resources:
  containers:
  - container: trivy
    image: aquasec/aqua-scanner
    env:
      AQUA_KEY: $(AQUA_KEY)
      AQUA_SECRET: $(AQUA_SECRET)
      AQUA_URL: https://api.asia-1.supply-chain.cloud.aquasec.com
      CSPM_URL: https://asia-1.api.cloudsploit.com
      TRIVY_RUN_AS_PLUGIN: aqua
      # For http/https proxy configuration add env vars: HTTP_PROXY/HTTPS_PROXY, CA-CRET (path to CA certificate)

variables:
  buildConfiguration: 'Release'
  leaderboardRepository: 'leaderboard'
  webRepository: 'web'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'secret'

stages:
- stage: 'Build'
  displayName: 'Build and push'
  jobs:  
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'
    steps:

    - task: Docker@2
      displayName: 'Build and push the image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(webRepository)
        dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/Dockerfile'
        containerRegistry: 'acr222'
        tags: |
          $(tag)
    - task: Docker@2
      displayName: 'Build and push the leaderboard image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(leaderboardRepository)
        dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.LeaderboardContainer/Dockerfile'
        containerRegistry: 'acr222'
        tags: |
          $(tag)
    - task: CmdLine@2
      displayName: "Manifest Generation"
      inputs: 
        script: |-
            export BILLY_SERVER=https://billy.asia-1.codesec.aquasec.com
            curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
            curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
            if ! cat install.sh.checksum | sha256sum --check; then
              echo "install.sh checksum failed"
              exit 1
            fi
            BINDIR="." sh install.sh
            rm install.sh install.sh.checksum
            ./billy generate \
              --access-token $(System.AccessToken) \
              --aqua-key $(AQUA_KEY) \
              --aqua-secret $(AQUA_SECRET) \
              --cspm-url https://asia-1.api.cloudsploit.com \
              --artifact-path  acr222/$(leaderboardRepository):$(tag)
            
              # The docker image name:tag of the newly built image
              # --artifact-path  my-image-name:${versionEnv}        
              # OR the path to the root folder of your project. I.e my-repo/my-app 
              # --artifact-path  ${env.MY_APP_ROOT}
  
    # - task: Docker@2
    #   displayName: Aqua Registry Login
    #   inputs:
    #     containerRegistry: 'aqua-registry'
    #     command: login

    # - bash: |
    #     docker pull mongo:latest
    #   displayName: Pull Docker image

    # - task: aquasecScanner@4
    #   inputs:
    #     image: 'mongo'
    #     scanType: 'local'
    #     register: false
    #     registry: false
    #     hideBase: false
    #     showNegligible: true
    #     connection: 'aqua'
    #     scanner: 'registry.aquasec.com/scanner:6.2.RC2'

- stage: 'Scan'
  displayName: 'Aqua Scan'
  dependsOn: Build
  jobs:  
  - job: 'Scan'
    container: trivy
    displayName: 'Scan by Aqua'
    steps:
    - script: |
        trivy fs --sast --scanners misconfig,vuln,secret .
        # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
        # To enable SAST scanning, add: --sast
        # To enable reachability scanning, add: --reachability
        # To enable npm/dotnet/gradle non-lock file scanning, add: --package-json / --dotnet-proj / --gradle
      displayName: Aqua scanner  

- stage: 'Deploy'
  displayName: 'Deploy the container'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy the container
    pool:
      vmImage: 'ubuntu-20.04'
    environment: 'spike'
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: manifests
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: 'acr222'
              kubernetesServiceConnection: 'k8s'
              namespace: 'default'
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: 'k8s'
              namespace: 'default'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(RegistryName)/$(webRepository):$(tag)
                $(RegistryName)/$(leaderboardRepository):$(tag)